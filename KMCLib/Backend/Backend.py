# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Backend', [dirname(__file__)])
        except ImportError:
            import _Backend
            return _Backend
        if fp is not None:
            try:
                _mod = imp.load_module('_Backend', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Backend = swig_import_helper()
    del swig_import_helper
else:
    import _Backend
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Backend.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _Backend.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Backend.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Backend.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Backend.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Backend.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Backend.SwigPyIterator_copy(self)

    def next(self):
        return _Backend.SwigPyIterator_next(self)

    def __next__(self):
        return _Backend.SwigPyIterator___next__(self)

    def previous(self):
        return _Backend.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Backend.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Backend.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Backend.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Backend.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Backend.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Backend.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Backend.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Backend.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StdVectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorString___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorString___bool__(self)

    def __len__(self):
        return _Backend.StdVectorString___len__(self)

    def pop(self):
        return _Backend.StdVectorString_pop(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorString___setitem__(self, *args)

    def append(self, x):
        return _Backend.StdVectorString_append(self, x)

    def empty(self):
        return _Backend.StdVectorString_empty(self)

    def size(self):
        return _Backend.StdVectorString_size(self)

    def clear(self):
        return _Backend.StdVectorString_clear(self)

    def swap(self, v):
        return _Backend.StdVectorString_swap(self, v)

    def get_allocator(self):
        return _Backend.StdVectorString_get_allocator(self)

    def begin(self):
        return _Backend.StdVectorString_begin(self)

    def end(self):
        return _Backend.StdVectorString_end(self)

    def rbegin(self):
        return _Backend.StdVectorString_rbegin(self)

    def rend(self):
        return _Backend.StdVectorString_rend(self)

    def pop_back(self):
        return _Backend.StdVectorString_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorString_erase(self, *args)

    def __init__(self, *args):
        this = _Backend.new_StdVectorString(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _Backend.StdVectorString_push_back(self, x)

    def front(self):
        return _Backend.StdVectorString_front(self)

    def back(self):
        return _Backend.StdVectorString_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorString_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorString_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorString_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorString_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorString_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorString
    __del__ = lambda self: None
StdVectorString_swigregister = _Backend.StdVectorString_swigregister
StdVectorString_swigregister(StdVectorString)

class StdVectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorDouble___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorDouble___bool__(self)

    def __len__(self):
        return _Backend.StdVectorDouble___len__(self)

    def pop(self):
        return _Backend.StdVectorDouble_pop(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorDouble___setitem__(self, *args)

    def append(self, x):
        return _Backend.StdVectorDouble_append(self, x)

    def empty(self):
        return _Backend.StdVectorDouble_empty(self)

    def size(self):
        return _Backend.StdVectorDouble_size(self)

    def clear(self):
        return _Backend.StdVectorDouble_clear(self)

    def swap(self, v):
        return _Backend.StdVectorDouble_swap(self, v)

    def get_allocator(self):
        return _Backend.StdVectorDouble_get_allocator(self)

    def begin(self):
        return _Backend.StdVectorDouble_begin(self)

    def end(self):
        return _Backend.StdVectorDouble_end(self)

    def rbegin(self):
        return _Backend.StdVectorDouble_rbegin(self)

    def rend(self):
        return _Backend.StdVectorDouble_rend(self)

    def pop_back(self):
        return _Backend.StdVectorDouble_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _Backend.new_StdVectorDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _Backend.StdVectorDouble_push_back(self, x)

    def front(self):
        return _Backend.StdVectorDouble_front(self)

    def back(self):
        return _Backend.StdVectorDouble_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorDouble_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorDouble_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorDouble_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorDouble_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorDouble
    __del__ = lambda self: None
StdVectorDouble_swigregister = _Backend.StdVectorDouble_swigregister
StdVectorDouble_swigregister(StdVectorDouble)

class StdVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorInt___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorInt___bool__(self)

    def __len__(self):
        return _Backend.StdVectorInt___len__(self)

    def pop(self):
        return _Backend.StdVectorInt_pop(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorInt___setitem__(self, *args)

    def append(self, x):
        return _Backend.StdVectorInt_append(self, x)

    def empty(self):
        return _Backend.StdVectorInt_empty(self)

    def size(self):
        return _Backend.StdVectorInt_size(self)

    def clear(self):
        return _Backend.StdVectorInt_clear(self)

    def swap(self, v):
        return _Backend.StdVectorInt_swap(self, v)

    def get_allocator(self):
        return _Backend.StdVectorInt_get_allocator(self)

    def begin(self):
        return _Backend.StdVectorInt_begin(self)

    def end(self):
        return _Backend.StdVectorInt_end(self)

    def rbegin(self):
        return _Backend.StdVectorInt_rbegin(self)

    def rend(self):
        return _Backend.StdVectorInt_rend(self)

    def pop_back(self):
        return _Backend.StdVectorInt_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _Backend.new_StdVectorInt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _Backend.StdVectorInt_push_back(self, x)

    def front(self):
        return _Backend.StdVectorInt_front(self)

    def back(self):
        return _Backend.StdVectorInt_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorInt_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorInt_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorInt_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorInt_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorInt_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorInt
    __del__ = lambda self: None
StdVectorInt_swigregister = _Backend.StdVectorInt_swigregister
StdVectorInt_swigregister(StdVectorInt)

class StdVectorBool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorBool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorBool, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorBool___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorBool___bool__(self)

    def __len__(self):
        return _Backend.StdVectorBool___len__(self)

    def pop(self):
        return _Backend.StdVectorBool_pop(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorBool___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorBool___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorBool___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorBool___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorBool___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorBool___setitem__(self, *args)

    def append(self, x):
        return _Backend.StdVectorBool_append(self, x)

    def empty(self):
        return _Backend.StdVectorBool_empty(self)

    def size(self):
        return _Backend.StdVectorBool_size(self)

    def clear(self):
        return _Backend.StdVectorBool_clear(self)

    def swap(self, v):
        return _Backend.StdVectorBool_swap(self, v)

    def get_allocator(self):
        return _Backend.StdVectorBool_get_allocator(self)

    def begin(self):
        return _Backend.StdVectorBool_begin(self)

    def end(self):
        return _Backend.StdVectorBool_end(self)

    def rbegin(self):
        return _Backend.StdVectorBool_rbegin(self)

    def rend(self):
        return _Backend.StdVectorBool_rend(self)

    def pop_back(self):
        return _Backend.StdVectorBool_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorBool_erase(self, *args)

    def __init__(self, *args):
        this = _Backend.new_StdVectorBool(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _Backend.StdVectorBool_push_back(self, x)

    def front(self):
        return _Backend.StdVectorBool_front(self)

    def back(self):
        return _Backend.StdVectorBool_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorBool_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorBool_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorBool_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorBool_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorBool_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorBool
    __del__ = lambda self: None
StdVectorBool_swigregister = _Backend.StdVectorBool_swigregister
StdVectorBool_swigregister(StdVectorBool)

class StdVectorProcess(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorProcess, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorProcess, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorProcess_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorProcess___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorProcess___bool__(self)

    def __len__(self):
        return _Backend.StdVectorProcess___len__(self)

    def pop(self):
        return _Backend.StdVectorProcess_pop(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorProcess___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorProcess___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorProcess___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorProcess___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorProcess___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorProcess___setitem__(self, *args)

    def append(self, x):
        return _Backend.StdVectorProcess_append(self, x)

    def empty(self):
        return _Backend.StdVectorProcess_empty(self)

    def size(self):
        return _Backend.StdVectorProcess_size(self)

    def clear(self):
        return _Backend.StdVectorProcess_clear(self)

    def swap(self, v):
        return _Backend.StdVectorProcess_swap(self, v)

    def get_allocator(self):
        return _Backend.StdVectorProcess_get_allocator(self)

    def begin(self):
        return _Backend.StdVectorProcess_begin(self)

    def end(self):
        return _Backend.StdVectorProcess_end(self)

    def rbegin(self):
        return _Backend.StdVectorProcess_rbegin(self)

    def rend(self):
        return _Backend.StdVectorProcess_rend(self)

    def pop_back(self):
        return _Backend.StdVectorProcess_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorProcess_erase(self, *args)

    def __init__(self, *args):
        this = _Backend.new_StdVectorProcess(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _Backend.StdVectorProcess_push_back(self, x)

    def front(self):
        return _Backend.StdVectorProcess_front(self)

    def back(self):
        return _Backend.StdVectorProcess_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorProcess_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorProcess_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorProcess_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorProcess_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorProcess_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorProcess
    __del__ = lambda self: None
StdVectorProcess_swigregister = _Backend.StdVectorProcess_swigregister
StdVectorProcess_swigregister(StdVectorProcess)

class StdVectorProcessPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorProcessPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorProcessPtr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorProcessPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorProcessPtr___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorProcessPtr___bool__(self)

    def __len__(self):
        return _Backend.StdVectorProcessPtr___len__(self)

    def pop(self):
        return _Backend.StdVectorProcessPtr_pop(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorProcessPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorProcessPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorProcessPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorProcessPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorProcessPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorProcessPtr___setitem__(self, *args)

    def append(self, x):
        return _Backend.StdVectorProcessPtr_append(self, x)

    def empty(self):
        return _Backend.StdVectorProcessPtr_empty(self)

    def size(self):
        return _Backend.StdVectorProcessPtr_size(self)

    def clear(self):
        return _Backend.StdVectorProcessPtr_clear(self)

    def swap(self, v):
        return _Backend.StdVectorProcessPtr_swap(self, v)

    def get_allocator(self):
        return _Backend.StdVectorProcessPtr_get_allocator(self)

    def begin(self):
        return _Backend.StdVectorProcessPtr_begin(self)

    def end(self):
        return _Backend.StdVectorProcessPtr_end(self)

    def rbegin(self):
        return _Backend.StdVectorProcessPtr_rbegin(self)

    def rend(self):
        return _Backend.StdVectorProcessPtr_rend(self)

    def pop_back(self):
        return _Backend.StdVectorProcessPtr_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorProcessPtr_erase(self, *args)

    def __init__(self, *args):
        this = _Backend.new_StdVectorProcessPtr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _Backend.StdVectorProcessPtr_push_back(self, x)

    def front(self):
        return _Backend.StdVectorProcessPtr_front(self)

    def back(self):
        return _Backend.StdVectorProcessPtr_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorProcessPtr_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorProcessPtr_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorProcessPtr_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorProcessPtr_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorProcessPtr_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorProcessPtr
    __del__ = lambda self: None
StdVectorProcessPtr_swigregister = _Backend.StdVectorProcessPtr_swigregister
StdVectorProcessPtr_swigregister(StdVectorProcessPtr)

class StdVectorCustomRateProcess(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorCustomRateProcess, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorCustomRateProcess, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorCustomRateProcess_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorCustomRateProcess___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorCustomRateProcess___bool__(self)

    def __len__(self):
        return _Backend.StdVectorCustomRateProcess___len__(self)

    def pop(self):
        return _Backend.StdVectorCustomRateProcess_pop(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorCustomRateProcess___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorCustomRateProcess___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorCustomRateProcess___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorCustomRateProcess___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorCustomRateProcess___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorCustomRateProcess___setitem__(self, *args)

    def append(self, x):
        return _Backend.StdVectorCustomRateProcess_append(self, x)

    def empty(self):
        return _Backend.StdVectorCustomRateProcess_empty(self)

    def size(self):
        return _Backend.StdVectorCustomRateProcess_size(self)

    def clear(self):
        return _Backend.StdVectorCustomRateProcess_clear(self)

    def swap(self, v):
        return _Backend.StdVectorCustomRateProcess_swap(self, v)

    def get_allocator(self):
        return _Backend.StdVectorCustomRateProcess_get_allocator(self)

    def begin(self):
        return _Backend.StdVectorCustomRateProcess_begin(self)

    def end(self):
        return _Backend.StdVectorCustomRateProcess_end(self)

    def rbegin(self):
        return _Backend.StdVectorCustomRateProcess_rbegin(self)

    def rend(self):
        return _Backend.StdVectorCustomRateProcess_rend(self)

    def pop_back(self):
        return _Backend.StdVectorCustomRateProcess_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorCustomRateProcess_erase(self, *args)

    def __init__(self, *args):
        this = _Backend.new_StdVectorCustomRateProcess(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _Backend.StdVectorCustomRateProcess_push_back(self, x)

    def front(self):
        return _Backend.StdVectorCustomRateProcess_front(self)

    def back(self):
        return _Backend.StdVectorCustomRateProcess_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorCustomRateProcess_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorCustomRateProcess_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorCustomRateProcess_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorCustomRateProcess_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorCustomRateProcess_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorCustomRateProcess
    __del__ = lambda self: None
StdVectorCustomRateProcess_swigregister = _Backend.StdVectorCustomRateProcess_swigregister
StdVectorCustomRateProcess_swigregister(StdVectorCustomRateProcess)

class StdVectorMinimalMatchListEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorMinimalMatchListEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorMinimalMatchListEntry, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorMinimalMatchListEntry_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorMinimalMatchListEntry___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorMinimalMatchListEntry___bool__(self)

    def __len__(self):
        return _Backend.StdVectorMinimalMatchListEntry___len__(self)

    def pop(self):
        return _Backend.StdVectorMinimalMatchListEntry_pop(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorMinimalMatchListEntry___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorMinimalMatchListEntry___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorMinimalMatchListEntry___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorMinimalMatchListEntry___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorMinimalMatchListEntry___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorMinimalMatchListEntry___setitem__(self, *args)

    def append(self, x):
        return _Backend.StdVectorMinimalMatchListEntry_append(self, x)

    def empty(self):
        return _Backend.StdVectorMinimalMatchListEntry_empty(self)

    def size(self):
        return _Backend.StdVectorMinimalMatchListEntry_size(self)

    def clear(self):
        return _Backend.StdVectorMinimalMatchListEntry_clear(self)

    def swap(self, v):
        return _Backend.StdVectorMinimalMatchListEntry_swap(self, v)

    def get_allocator(self):
        return _Backend.StdVectorMinimalMatchListEntry_get_allocator(self)

    def begin(self):
        return _Backend.StdVectorMinimalMatchListEntry_begin(self)

    def end(self):
        return _Backend.StdVectorMinimalMatchListEntry_end(self)

    def rbegin(self):
        return _Backend.StdVectorMinimalMatchListEntry_rbegin(self)

    def rend(self):
        return _Backend.StdVectorMinimalMatchListEntry_rend(self)

    def pop_back(self):
        return _Backend.StdVectorMinimalMatchListEntry_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorMinimalMatchListEntry_erase(self, *args)

    def __init__(self, *args):
        this = _Backend.new_StdVectorMinimalMatchListEntry(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _Backend.StdVectorMinimalMatchListEntry_push_back(self, x)

    def front(self):
        return _Backend.StdVectorMinimalMatchListEntry_front(self)

    def back(self):
        return _Backend.StdVectorMinimalMatchListEntry_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorMinimalMatchListEntry_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorMinimalMatchListEntry_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorMinimalMatchListEntry_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorMinimalMatchListEntry_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorMinimalMatchListEntry_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorMinimalMatchListEntry
    __del__ = lambda self: None
StdVectorMinimalMatchListEntry_swigregister = _Backend.StdVectorMinimalMatchListEntry_swigregister
StdVectorMinimalMatchListEntry_swigregister(StdVectorMinimalMatchListEntry)

class StdVectorStdVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorStdVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorStdVectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorStdVectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorStdVectorInt___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorStdVectorInt___bool__(self)

    def __len__(self):
        return _Backend.StdVectorStdVectorInt___len__(self)

    def pop(self):
        return _Backend.StdVectorStdVectorInt_pop(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorStdVectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorStdVectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorStdVectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorStdVectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorStdVectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorStdVectorInt___setitem__(self, *args)

    def append(self, x):
        return _Backend.StdVectorStdVectorInt_append(self, x)

    def empty(self):
        return _Backend.StdVectorStdVectorInt_empty(self)

    def size(self):
        return _Backend.StdVectorStdVectorInt_size(self)

    def clear(self):
        return _Backend.StdVectorStdVectorInt_clear(self)

    def swap(self, v):
        return _Backend.StdVectorStdVectorInt_swap(self, v)

    def get_allocator(self):
        return _Backend.StdVectorStdVectorInt_get_allocator(self)

    def begin(self):
        return _Backend.StdVectorStdVectorInt_begin(self)

    def end(self):
        return _Backend.StdVectorStdVectorInt_end(self)

    def rbegin(self):
        return _Backend.StdVectorStdVectorInt_rbegin(self)

    def rend(self):
        return _Backend.StdVectorStdVectorInt_rend(self)

    def pop_back(self):
        return _Backend.StdVectorStdVectorInt_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorStdVectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _Backend.new_StdVectorStdVectorInt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _Backend.StdVectorStdVectorInt_push_back(self, x)

    def front(self):
        return _Backend.StdVectorStdVectorInt_front(self)

    def back(self):
        return _Backend.StdVectorStdVectorInt_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorStdVectorInt_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorStdVectorInt_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorStdVectorInt_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorStdVectorInt_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorStdVectorInt_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorStdVectorInt
    __del__ = lambda self: None
StdVectorStdVectorInt_swigregister = _Backend.StdVectorStdVectorInt_swigregister
StdVectorStdVectorInt_swigregister(StdVectorStdVectorInt)

class StdVectorStdVectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorStdVectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorStdVectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorStdVectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorStdVectorDouble___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorStdVectorDouble___bool__(self)

    def __len__(self):
        return _Backend.StdVectorStdVectorDouble___len__(self)

    def pop(self):
        return _Backend.StdVectorStdVectorDouble_pop(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorStdVectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorStdVectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorStdVectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorStdVectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorStdVectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorStdVectorDouble___setitem__(self, *args)

    def append(self, x):
        return _Backend.StdVectorStdVectorDouble_append(self, x)

    def empty(self):
        return _Backend.StdVectorStdVectorDouble_empty(self)

    def size(self):
        return _Backend.StdVectorStdVectorDouble_size(self)

    def clear(self):
        return _Backend.StdVectorStdVectorDouble_clear(self)

    def swap(self, v):
        return _Backend.StdVectorStdVectorDouble_swap(self, v)

    def get_allocator(self):
        return _Backend.StdVectorStdVectorDouble_get_allocator(self)

    def begin(self):
        return _Backend.StdVectorStdVectorDouble_begin(self)

    def end(self):
        return _Backend.StdVectorStdVectorDouble_end(self)

    def rbegin(self):
        return _Backend.StdVectorStdVectorDouble_rbegin(self)

    def rend(self):
        return _Backend.StdVectorStdVectorDouble_rend(self)

    def pop_back(self):
        return _Backend.StdVectorStdVectorDouble_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorStdVectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _Backend.new_StdVectorStdVectorDouble(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _Backend.StdVectorStdVectorDouble_push_back(self, x)

    def front(self):
        return _Backend.StdVectorStdVectorDouble_front(self)

    def back(self):
        return _Backend.StdVectorStdVectorDouble_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorStdVectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorStdVectorDouble_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorStdVectorDouble_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorStdVectorDouble_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorStdVectorDouble_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorStdVectorDouble
    __del__ = lambda self: None
StdVectorStdVectorDouble_swigregister = _Backend.StdVectorStdVectorDouble_swigregister
StdVectorStdVectorDouble_swigregister(StdVectorStdVectorDouble)

class StdVectorCoordinate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorCoordinate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorCoordinate, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorCoordinate_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorCoordinate___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorCoordinate___bool__(self)

    def __len__(self):
        return _Backend.StdVectorCoordinate___len__(self)

    def pop(self):
        return _Backend.StdVectorCoordinate_pop(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorCoordinate___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorCoordinate___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorCoordinate___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorCoordinate___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorCoordinate___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorCoordinate___setitem__(self, *args)

    def append(self, x):
        return _Backend.StdVectorCoordinate_append(self, x)

    def empty(self):
        return _Backend.StdVectorCoordinate_empty(self)

    def size(self):
        return _Backend.StdVectorCoordinate_size(self)

    def clear(self):
        return _Backend.StdVectorCoordinate_clear(self)

    def swap(self, v):
        return _Backend.StdVectorCoordinate_swap(self, v)

    def get_allocator(self):
        return _Backend.StdVectorCoordinate_get_allocator(self)

    def begin(self):
        return _Backend.StdVectorCoordinate_begin(self)

    def end(self):
        return _Backend.StdVectorCoordinate_end(self)

    def rbegin(self):
        return _Backend.StdVectorCoordinate_rbegin(self)

    def rend(self):
        return _Backend.StdVectorCoordinate_rend(self)

    def pop_back(self):
        return _Backend.StdVectorCoordinate_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorCoordinate_erase(self, *args)

    def __init__(self, *args):
        this = _Backend.new_StdVectorCoordinate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _Backend.StdVectorCoordinate_push_back(self, x)

    def front(self):
        return _Backend.StdVectorCoordinate_front(self)

    def back(self):
        return _Backend.StdVectorCoordinate_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorCoordinate_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorCoordinate_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorCoordinate_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorCoordinate_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorCoordinate_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorCoordinate
    __del__ = lambda self: None
StdVectorCoordinate_swigregister = _Backend.StdVectorCoordinate_swigregister
StdVectorCoordinate_swigregister(StdVectorCoordinate)

class StdVectorStdPairCoordinate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorStdPairCoordinate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorStdPairCoordinate, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorStdPairCoordinate_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorStdPairCoordinate___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorStdPairCoordinate___bool__(self)

    def __len__(self):
        return _Backend.StdVectorStdPairCoordinate___len__(self)

    def pop(self):
        return _Backend.StdVectorStdPairCoordinate_pop(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorStdPairCoordinate___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorStdPairCoordinate___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorStdPairCoordinate___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorStdPairCoordinate___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorStdPairCoordinate___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorStdPairCoordinate___setitem__(self, *args)

    def append(self, x):
        return _Backend.StdVectorStdPairCoordinate_append(self, x)

    def empty(self):
        return _Backend.StdVectorStdPairCoordinate_empty(self)

    def size(self):
        return _Backend.StdVectorStdPairCoordinate_size(self)

    def clear(self):
        return _Backend.StdVectorStdPairCoordinate_clear(self)

    def swap(self, v):
        return _Backend.StdVectorStdPairCoordinate_swap(self, v)

    def get_allocator(self):
        return _Backend.StdVectorStdPairCoordinate_get_allocator(self)

    def begin(self):
        return _Backend.StdVectorStdPairCoordinate_begin(self)

    def end(self):
        return _Backend.StdVectorStdPairCoordinate_end(self)

    def rbegin(self):
        return _Backend.StdVectorStdPairCoordinate_rbegin(self)

    def rend(self):
        return _Backend.StdVectorStdPairCoordinate_rend(self)

    def pop_back(self):
        return _Backend.StdVectorStdPairCoordinate_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorStdPairCoordinate_erase(self, *args)

    def __init__(self, *args):
        this = _Backend.new_StdVectorStdPairCoordinate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _Backend.StdVectorStdPairCoordinate_push_back(self, x)

    def front(self):
        return _Backend.StdVectorStdPairCoordinate_front(self)

    def back(self):
        return _Backend.StdVectorStdPairCoordinate_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorStdPairCoordinate_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorStdPairCoordinate_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorStdPairCoordinate_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorStdPairCoordinate_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorStdPairCoordinate_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorStdPairCoordinate
    __del__ = lambda self: None
StdVectorStdPairCoordinate_swigregister = _Backend.StdVectorStdPairCoordinate_swigregister
StdVectorStdPairCoordinate_swigregister(StdVectorStdPairCoordinate)

class StdVectorStdVectorCoordinate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorStdVectorCoordinate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorStdVectorCoordinate, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorStdVectorCoordinate_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorStdVectorCoordinate___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorStdVectorCoordinate___bool__(self)

    def __len__(self):
        return _Backend.StdVectorStdVectorCoordinate___len__(self)

    def pop(self):
        return _Backend.StdVectorStdVectorCoordinate_pop(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorStdVectorCoordinate___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorStdVectorCoordinate___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorStdVectorCoordinate___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorStdVectorCoordinate___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorStdVectorCoordinate___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorStdVectorCoordinate___setitem__(self, *args)

    def append(self, x):
        return _Backend.StdVectorStdVectorCoordinate_append(self, x)

    def empty(self):
        return _Backend.StdVectorStdVectorCoordinate_empty(self)

    def size(self):
        return _Backend.StdVectorStdVectorCoordinate_size(self)

    def clear(self):
        return _Backend.StdVectorStdVectorCoordinate_clear(self)

    def swap(self, v):
        return _Backend.StdVectorStdVectorCoordinate_swap(self, v)

    def get_allocator(self):
        return _Backend.StdVectorStdVectorCoordinate_get_allocator(self)

    def begin(self):
        return _Backend.StdVectorStdVectorCoordinate_begin(self)

    def end(self):
        return _Backend.StdVectorStdVectorCoordinate_end(self)

    def rbegin(self):
        return _Backend.StdVectorStdVectorCoordinate_rbegin(self)

    def rend(self):
        return _Backend.StdVectorStdVectorCoordinate_rend(self)

    def pop_back(self):
        return _Backend.StdVectorStdVectorCoordinate_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorStdVectorCoordinate_erase(self, *args)

    def __init__(self, *args):
        this = _Backend.new_StdVectorStdVectorCoordinate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _Backend.StdVectorStdVectorCoordinate_push_back(self, x)

    def front(self):
        return _Backend.StdVectorStdVectorCoordinate_front(self)

    def back(self):
        return _Backend.StdVectorStdVectorCoordinate_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorStdVectorCoordinate_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorStdVectorCoordinate_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorStdVectorCoordinate_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorStdVectorCoordinate_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorStdVectorCoordinate_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorStdVectorCoordinate
    __del__ = lambda self: None
StdVectorStdVectorCoordinate_swigregister = _Backend.StdVectorStdVectorCoordinate_swigregister
StdVectorStdVectorCoordinate_swigregister(StdVectorStdVectorCoordinate)

class StdMapStringInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdMapStringInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdMapStringInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdMapStringInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdMapStringInt___nonzero__(self)

    def __bool__(self):
        return _Backend.StdMapStringInt___bool__(self)

    def __len__(self):
        return _Backend.StdMapStringInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _Backend.StdMapStringInt___getitem__(self, key)

    def __delitem__(self, key):
        return _Backend.StdMapStringInt___delitem__(self, key)

    def has_key(self, key):
        return _Backend.StdMapStringInt_has_key(self, key)

    def keys(self):
        return _Backend.StdMapStringInt_keys(self)

    def values(self):
        return _Backend.StdMapStringInt_values(self)

    def items(self):
        return _Backend.StdMapStringInt_items(self)

    def __contains__(self, key):
        return _Backend.StdMapStringInt___contains__(self, key)

    def key_iterator(self):
        return _Backend.StdMapStringInt_key_iterator(self)

    def value_iterator(self):
        return _Backend.StdMapStringInt_value_iterator(self)

    def __setitem__(self, *args):
        return _Backend.StdMapStringInt___setitem__(self, *args)

    def asdict(self):
        return _Backend.StdMapStringInt_asdict(self)

    def __init__(self, *args):
        this = _Backend.new_StdMapStringInt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        return _Backend.StdMapStringInt_empty(self)

    def size(self):
        return _Backend.StdMapStringInt_size(self)

    def clear(self):
        return _Backend.StdMapStringInt_clear(self)

    def swap(self, v):
        return _Backend.StdMapStringInt_swap(self, v)

    def get_allocator(self):
        return _Backend.StdMapStringInt_get_allocator(self)

    def begin(self):
        return _Backend.StdMapStringInt_begin(self)

    def end(self):
        return _Backend.StdMapStringInt_end(self)

    def rbegin(self):
        return _Backend.StdMapStringInt_rbegin(self)

    def rend(self):
        return _Backend.StdMapStringInt_rend(self)

    def count(self, x):
        return _Backend.StdMapStringInt_count(self, x)

    def erase(self, *args):
        return _Backend.StdMapStringInt_erase(self, *args)

    def find(self, x):
        return _Backend.StdMapStringInt_find(self, x)

    def lower_bound(self, x):
        return _Backend.StdMapStringInt_lower_bound(self, x)

    def upper_bound(self, x):
        return _Backend.StdMapStringInt_upper_bound(self, x)
    __swig_destroy__ = _Backend.delete_StdMapStringInt
    __del__ = lambda self: None
StdMapStringInt_swigregister = _Backend.StdMapStringInt_swigregister
StdMapStringInt_swigregister(StdMapStringInt)

class StdVectorStdPairIntInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorStdPairIntInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorStdPairIntInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorStdPairIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorStdPairIntInt___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorStdPairIntInt___bool__(self)

    def __len__(self):
        return _Backend.StdVectorStdPairIntInt___len__(self)

    def pop(self):
        return _Backend.StdVectorStdPairIntInt_pop(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorStdPairIntInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorStdPairIntInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorStdPairIntInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorStdPairIntInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorStdPairIntInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorStdPairIntInt___setitem__(self, *args)

    def append(self, x):
        return _Backend.StdVectorStdPairIntInt_append(self, x)

    def empty(self):
        return _Backend.StdVectorStdPairIntInt_empty(self)

    def size(self):
        return _Backend.StdVectorStdPairIntInt_size(self)

    def clear(self):
        return _Backend.StdVectorStdPairIntInt_clear(self)

    def swap(self, v):
        return _Backend.StdVectorStdPairIntInt_swap(self, v)

    def get_allocator(self):
        return _Backend.StdVectorStdPairIntInt_get_allocator(self)

    def begin(self):
        return _Backend.StdVectorStdPairIntInt_begin(self)

    def end(self):
        return _Backend.StdVectorStdPairIntInt_end(self)

    def rbegin(self):
        return _Backend.StdVectorStdPairIntInt_rbegin(self)

    def rend(self):
        return _Backend.StdVectorStdPairIntInt_rend(self)

    def pop_back(self):
        return _Backend.StdVectorStdPairIntInt_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorStdPairIntInt_erase(self, *args)

    def __init__(self, *args):
        this = _Backend.new_StdVectorStdPairIntInt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _Backend.StdVectorStdPairIntInt_push_back(self, x)

    def front(self):
        return _Backend.StdVectorStdPairIntInt_front(self)

    def back(self):
        return _Backend.StdVectorStdPairIntInt_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorStdPairIntInt_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorStdPairIntInt_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorStdPairIntInt_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorStdPairIntInt_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorStdPairIntInt_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorStdPairIntInt
    __del__ = lambda self: None
StdVectorStdPairIntInt_swigregister = _Backend.StdVectorStdPairIntInt_swigregister
StdVectorStdPairIntInt_swigregister(StdVectorStdPairIntInt)

class LatticeModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LatticeModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LatticeModel, name)
    __repr__ = _swig_repr

    def __init__(self, configuration, simulation_timer, lattice_map, interactions):
        this = _Backend.new_LatticeModel(configuration, simulation_timer, lattice_map, interactions)
        try:
            self.this.append(this)
        except:
            self.this = this

    def singleStep(self):
        return _Backend.LatticeModel_singleStep(self)

    def interactions(self):
        return _Backend.LatticeModel_interactions(self)

    def configuration(self):
        return _Backend.LatticeModel_configuration(self)

    def latticeMap(self):
        return _Backend.LatticeModel_latticeMap(self)
    __swig_destroy__ = _Backend.delete_LatticeModel
    __del__ = lambda self: None
LatticeModel_swigregister = _Backend.LatticeModel_swigregister
LatticeModel_swigregister(LatticeModel)

class LatticeMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LatticeMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LatticeMap, name)
    __repr__ = _swig_repr

    def __init__(self, n_basis, repetitions, periodic):
        this = _Backend.new_LatticeMap(n_basis, repetitions, periodic)
        try:
            self.this.append(this)
        except:
            self.this = this

    def neighbourIndices(self, index, shells=1):
        return _Backend.LatticeMap_neighbourIndices(self, index, shells)

    def supersetNeighbourIndices(self, indices, shells):
        return _Backend.LatticeMap_supersetNeighbourIndices(self, indices, shells)

    def indicesFromCell(self, i, j, k):
        return _Backend.LatticeMap_indicesFromCell(self, i, j, k)

    def indexFromMoveInfo(self, index, i, j, k, basis):
        return _Backend.LatticeMap_indexFromMoveInfo(self, index, i, j, k, basis)

    def indexToCell(self, index, cell_i, cell_j, cell_k):
        return _Backend.LatticeMap_indexToCell(self, index, cell_i, cell_j, cell_k)

    def basisSiteFromIndex(self, index):
        return _Backend.LatticeMap_basisSiteFromIndex(self, index)

    def nBasis(self):
        return _Backend.LatticeMap_nBasis(self)

    def periodicA(self):
        return _Backend.LatticeMap_periodicA(self)

    def periodicB(self):
        return _Backend.LatticeMap_periodicB(self)

    def periodicC(self):
        return _Backend.LatticeMap_periodicC(self)

    def repetitionsA(self):
        return _Backend.LatticeMap_repetitionsA(self)

    def repetitionsB(self):
        return _Backend.LatticeMap_repetitionsB(self)

    def repetitionsC(self):
        return _Backend.LatticeMap_repetitionsC(self)

    def wrap(self, *args):
        return _Backend.LatticeMap_wrap(self, *args)
    __swig_destroy__ = _Backend.delete_LatticeMap
    __del__ = lambda self: None
LatticeMap_swigregister = _Backend.LatticeMap_swigregister
LatticeMap_swigregister(LatticeMap)

class Configuration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Configuration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Configuration, name)
    __repr__ = _swig_repr

    def __init__(self, coordinates, elements, possible_types):
        this = _Backend.new_Configuration(coordinates, elements, possible_types)
        try:
            self.this.append(this)
        except:
            self.this = this

    def initMatchLists(self, lattice_map, range):
        return _Backend.Configuration_initMatchLists(self, lattice_map, range)

    def coordinates(self):
        return _Backend.Configuration_coordinates(self)

    def atomIDCoordinates(self):
        return _Backend.Configuration_atomIDCoordinates(self)

    def elements(self):
        return _Backend.Configuration_elements(self)

    def atomIDElements(self):
        return _Backend.Configuration_atomIDElements(self)

    def types(self):
        return _Backend.Configuration_types(self)

    def movedAtomIDs(self):
        return _Backend.Configuration_movedAtomIDs(self)

    def recentMoveVectors(self):
        return _Backend.Configuration_recentMoveVectors(self)

    def updateMatchList(self, index):
        return _Backend.Configuration_updateMatchList(self, index)

    def minimalMatchList(self, *args):
        return _Backend.Configuration_minimalMatchList(self, *args)

    def performProcess(self, process, site_index, lattice_map):
        return _Backend.Configuration_performProcess(self, process, site_index, lattice_map)

    def typeName(self, type):
        return _Backend.Configuration_typeName(self, type)

    def atomIdCoordinates(self):
        return _Backend.Configuration_atomIdCoordinates(self)

    def atomID(self):
        return _Backend.Configuration_atomID(self)
    __swig_destroy__ = _Backend.delete_Configuration
    __del__ = lambda self: None
Configuration_swigregister = _Backend.Configuration_swigregister
Configuration_swigregister(Configuration)

class Interactions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Interactions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Interactions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Backend.new_Interactions(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def maxRange(self):
        return _Backend.Interactions_maxRange(self)

    def useCustomRates(self):
        return _Backend.Interactions_useCustomRates(self)

    def updateProcessMatchLists(self, configuration, lattice_map):
        return _Backend.Interactions_updateProcessMatchLists(self, configuration, lattice_map)

    def processes(self, *args):
        return _Backend.Interactions_processes(self, *args)

    def rateCalculator(self):
        return _Backend.Interactions_rateCalculator(self)

    def totalAvailableSites(self):
        return _Backend.Interactions_totalAvailableSites(self)

    def probabilityTable(self):
        return _Backend.Interactions_probabilityTable(self)

    def updateProbabilityTable(self):
        return _Backend.Interactions_updateProbabilityTable(self)

    def totalRate(self):
        return _Backend.Interactions_totalRate(self)

    def pickProcessIndex(self):
        return _Backend.Interactions_pickProcessIndex(self)

    def pickProcess(self):
        return _Backend.Interactions_pickProcess(self)
    __swig_destroy__ = _Backend.delete_Interactions
    __del__ = lambda self: None
Interactions_swigregister = _Backend.Interactions_swigregister
Interactions_swigregister(Interactions)

class Process(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Process, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Process, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Backend.new_Process(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Backend.delete_Process
    __del__ = lambda self: None

    def totalRate(self):
        return _Backend.Process_totalRate(self)

    def addSite(self, index, rate=0.0):
        return _Backend.Process_addSite(self, index, rate)

    def removeSite(self, index):
        return _Backend.Process_removeSite(self, index)

    def pickSite(self):
        return _Backend.Process_pickSite(self)

    def updateRateTable(self):
        return _Backend.Process_updateRateTable(self)

    def rateConstant(self):
        return _Backend.Process_rateConstant(self)

    def nSites(self):
        return _Backend.Process_nSites(self)

    def isListed(self, index):
        return _Backend.Process_isListed(self, index)

    def sites(self):
        return _Backend.Process_sites(self)

    def minimalMatchList(self, *args):
        return _Backend.Process_minimalMatchList(self, *args)

    def affectedIndices(self, *args):
        return _Backend.Process_affectedIndices(self, *args)

    def basisSites(self):
        return _Backend.Process_basisSites(self)

    def idMoves(self, *args):
        return _Backend.Process_idMoves(self, *args)

    def cutoff(self):
        return _Backend.Process_cutoff(self)

    def range(self):
        return _Backend.Process_range(self)

    def processNumber(self):
        return _Backend.Process_processNumber(self)
Process_swigregister = _Backend.Process_swigregister
Process_swigregister(Process)

class CustomRateProcess(Process):
    __swig_setmethods__ = {}
    for _s in [Process]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustomRateProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [Process]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CustomRateProcess, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Backend.new_CustomRateProcess(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Backend.delete_CustomRateProcess
    __del__ = lambda self: None

    def totalRate(self):
        return _Backend.CustomRateProcess_totalRate(self)

    def addSite(self, index, rate):
        return _Backend.CustomRateProcess_addSite(self, index, rate)

    def removeSite(self, index):
        return _Backend.CustomRateProcess_removeSite(self, index)

    def pickSite(self):
        return _Backend.CustomRateProcess_pickSite(self)

    def updateRateTable(self):
        return _Backend.CustomRateProcess_updateRateTable(self)
CustomRateProcess_swigregister = _Backend.CustomRateProcess_swigregister
CustomRateProcess_swigregister(CustomRateProcess)

class Coordinate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Coordinate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Coordinate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Backend.new_Coordinate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def norm(self):
        return _Backend.Coordinate_norm(self)

    def outerProdDiag(self, other):
        return _Backend.Coordinate_outerProdDiag(self, other)

    def dot(self, other):
        return _Backend.Coordinate_dot(self, other)

    def __lt__(self, other):
        return _Backend.Coordinate___lt__(self, other)

    def __eq__(self, other):
        return _Backend.Coordinate___eq__(self, other)

    def __ne__(self, other):
        return _Backend.Coordinate___ne__(self, other)

    def __sub__(self, other):
        return _Backend.Coordinate___sub__(self, other)

    def __add__(self, other):
        return _Backend.Coordinate___add__(self, other)

    def __iadd__(self, other):
        return _Backend.Coordinate___iadd__(self, other)

    def __mul__(self, scalar):
        return _Backend.Coordinate___mul__(self, scalar)

    def x(self):
        return _Backend.Coordinate_x(self)

    def y(self):
        return _Backend.Coordinate_y(self)

    def z(self):
        return _Backend.Coordinate_z(self)

    def data(self):
        return _Backend.Coordinate_data(self)

    def distance(self, other):
        return _Backend.Coordinate_distance(self, other)

    def distanceToOrigin(self):
        return _Backend.Coordinate_distanceToOrigin(self)

    def _print(self):
        return _Backend.Coordinate__print(self)

    def __getitem__(self, i):
        return _Backend.Coordinate___getitem__(self, i)

    def __setitem__(self, i, value):
        return _Backend.Coordinate___setitem__(self, i, value)
    __swig_destroy__ = _Backend.delete_Coordinate
    __del__ = lambda self: None
Coordinate_swigregister = _Backend.Coordinate_swigregister
Coordinate_swigregister(Coordinate)

class MinimalMatchListEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinimalMatchListEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MinimalMatchListEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["has_move_coordinate"] = _Backend.MinimalMatchListEntry_has_move_coordinate_set
    __swig_getmethods__["has_move_coordinate"] = _Backend.MinimalMatchListEntry_has_move_coordinate_get
    if _newclass:
        has_move_coordinate = _swig_property(_Backend.MinimalMatchListEntry_has_move_coordinate_get, _Backend.MinimalMatchListEntry_has_move_coordinate_set)
    __swig_setmethods__["match_type"] = _Backend.MinimalMatchListEntry_match_type_set
    __swig_getmethods__["match_type"] = _Backend.MinimalMatchListEntry_match_type_get
    if _newclass:
        match_type = _swig_property(_Backend.MinimalMatchListEntry_match_type_get, _Backend.MinimalMatchListEntry_match_type_set)
    __swig_setmethods__["update_type"] = _Backend.MinimalMatchListEntry_update_type_set
    __swig_getmethods__["update_type"] = _Backend.MinimalMatchListEntry_update_type_get
    if _newclass:
        update_type = _swig_property(_Backend.MinimalMatchListEntry_update_type_get, _Backend.MinimalMatchListEntry_update_type_set)
    __swig_setmethods__["index"] = _Backend.MinimalMatchListEntry_index_set
    __swig_getmethods__["index"] = _Backend.MinimalMatchListEntry_index_get
    if _newclass:
        index = _swig_property(_Backend.MinimalMatchListEntry_index_get, _Backend.MinimalMatchListEntry_index_set)
    __swig_setmethods__["move_cell_i"] = _Backend.MinimalMatchListEntry_move_cell_i_set
    __swig_getmethods__["move_cell_i"] = _Backend.MinimalMatchListEntry_move_cell_i_get
    if _newclass:
        move_cell_i = _swig_property(_Backend.MinimalMatchListEntry_move_cell_i_get, _Backend.MinimalMatchListEntry_move_cell_i_set)
    __swig_setmethods__["move_cell_j"] = _Backend.MinimalMatchListEntry_move_cell_j_set
    __swig_getmethods__["move_cell_j"] = _Backend.MinimalMatchListEntry_move_cell_j_get
    if _newclass:
        move_cell_j = _swig_property(_Backend.MinimalMatchListEntry_move_cell_j_get, _Backend.MinimalMatchListEntry_move_cell_j_set)
    __swig_setmethods__["move_cell_k"] = _Backend.MinimalMatchListEntry_move_cell_k_set
    __swig_getmethods__["move_cell_k"] = _Backend.MinimalMatchListEntry_move_cell_k_get
    if _newclass:
        move_cell_k = _swig_property(_Backend.MinimalMatchListEntry_move_cell_k_get, _Backend.MinimalMatchListEntry_move_cell_k_set)
    __swig_setmethods__["move_basis"] = _Backend.MinimalMatchListEntry_move_basis_set
    __swig_getmethods__["move_basis"] = _Backend.MinimalMatchListEntry_move_basis_get
    if _newclass:
        move_basis = _swig_property(_Backend.MinimalMatchListEntry_move_basis_get, _Backend.MinimalMatchListEntry_move_basis_set)
    __swig_setmethods__["distance"] = _Backend.MinimalMatchListEntry_distance_set
    __swig_getmethods__["distance"] = _Backend.MinimalMatchListEntry_distance_get
    if _newclass:
        distance = _swig_property(_Backend.MinimalMatchListEntry_distance_get, _Backend.MinimalMatchListEntry_distance_set)
    __swig_setmethods__["coordinate"] = _Backend.MinimalMatchListEntry_coordinate_set
    __swig_getmethods__["coordinate"] = _Backend.MinimalMatchListEntry_coordinate_get
    if _newclass:
        coordinate = _swig_property(_Backend.MinimalMatchListEntry_coordinate_get, _Backend.MinimalMatchListEntry_coordinate_set)
    __swig_setmethods__["move_coordinate"] = _Backend.MinimalMatchListEntry_move_coordinate_set
    __swig_getmethods__["move_coordinate"] = _Backend.MinimalMatchListEntry_move_coordinate_get
    if _newclass:
        move_coordinate = _swig_property(_Backend.MinimalMatchListEntry_move_coordinate_get, _Backend.MinimalMatchListEntry_move_coordinate_set)

    def __init__(self):
        this = _Backend.new_MinimalMatchListEntry()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Backend.delete_MinimalMatchListEntry
    __del__ = lambda self: None
MinimalMatchListEntry_swigregister = _Backend.MinimalMatchListEntry_swigregister
MinimalMatchListEntry_swigregister(MinimalMatchListEntry)

class SimulationTimer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimulationTimer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimulationTimer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Backend.new_SimulationTimer()
        try:
            self.this.append(this)
        except:
            self.this = this

    def propagateTime(self, total_rate):
        return _Backend.SimulationTimer_propagateTime(self, total_rate)

    def simulationTime(self):
        return _Backend.SimulationTimer_simulationTime(self)
    __swig_destroy__ = _Backend.delete_SimulationTimer
    __del__ = lambda self: None
SimulationTimer_swigregister = _Backend.SimulationTimer_swigregister
SimulationTimer_swigregister(SimulationTimer)
cvar = _Backend.cvar

class RateCalculator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RateCalculator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RateCalculator, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == RateCalculator:
            _self = None
        else:
            _self = self
        this = _Backend.new_RateCalculator(_self, )
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Backend.delete_RateCalculator
    __del__ = lambda self: None

    def backendRateCallback(self, geometry, len, types_before, types_after, rate_constant, process_number, global_x, global_y, global_z):
        return _Backend.RateCalculator_backendRateCallback(self, geometry, len, types_before, types_after, rate_constant, process_number, global_x, global_y, global_z)
    def __disown__(self):
        self.this.disown()
        _Backend.disown_RateCalculator(self)
        return weakref_proxy(self)
RateCalculator_swigregister = _Backend.RateCalculator_swigregister
RateCalculator_swigregister(RateCalculator)

class SimpleDummyBaseClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleDummyBaseClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleDummyBaseClass, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == SimpleDummyBaseClass:
            _self = None
        else:
            _self = self
        this = _Backend.new_SimpleDummyBaseClass(_self, )
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Backend.delete_SimpleDummyBaseClass
    __del__ = lambda self: None

    def whoAmI(self):
        return _Backend.SimpleDummyBaseClass_whoAmI(self)
    def __disown__(self):
        self.this.disown()
        _Backend.disown_SimpleDummyBaseClass(self)
        return weakref_proxy(self)
SimpleDummyBaseClass_swigregister = _Backend.SimpleDummyBaseClass_swigregister
SimpleDummyBaseClass_swigregister(SimpleDummyBaseClass)


def callWhoAmI(obj):
    return _Backend.callWhoAmI(obj)
callWhoAmI = _Backend.callWhoAmI

def getRate(rc, geometry, types_before, types_after, rate_constant, process_number, global_x, global_y, global_z):
    return _Backend.getRate(rc, geometry, types_before, types_after, rate_constant, process_number, global_x, global_y, global_z)
getRate = _Backend.getRate
class MPICommons(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MPICommons, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MPICommons, name)
    __repr__ = _swig_repr
    __swig_getmethods__["init"] = lambda x: _Backend.MPICommons_init
    if _newclass:
        init = staticmethod(_Backend.MPICommons_init)
    __swig_getmethods__["finalize"] = lambda x: _Backend.MPICommons_finalize
    if _newclass:
        finalize = staticmethod(_Backend.MPICommons_finalize)
    __swig_getmethods__["myRank"] = lambda x: _Backend.MPICommons_myRank
    if _newclass:
        myRank = staticmethod(_Backend.MPICommons_myRank)
    __swig_getmethods__["size"] = lambda x: _Backend.MPICommons_size
    if _newclass:
        size = staticmethod(_Backend.MPICommons_size)
    __swig_getmethods__["barrier"] = lambda x: _Backend.MPICommons_barrier
    if _newclass:
        barrier = staticmethod(_Backend.MPICommons_barrier)
    __swig_getmethods__["isMaster"] = lambda x: _Backend.MPICommons_isMaster
    if _newclass:
        isMaster = staticmethod(_Backend.MPICommons_isMaster)

    def __init__(self):
        this = _Backend.new_MPICommons()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Backend.delete_MPICommons
    __del__ = lambda self: None
MPICommons_swigregister = _Backend.MPICommons_swigregister
MPICommons_swigregister(MPICommons)

def MPICommons_init():
    return _Backend.MPICommons_init()
MPICommons_init = _Backend.MPICommons_init

def MPICommons_finalize():
    return _Backend.MPICommons_finalize()
MPICommons_finalize = _Backend.MPICommons_finalize

def MPICommons_myRank(*args):
    return _Backend.MPICommons_myRank(*args)
MPICommons_myRank = _Backend.MPICommons_myRank

def MPICommons_size(*args):
    return _Backend.MPICommons_size(*args)
MPICommons_size = _Backend.MPICommons_size

def MPICommons_barrier(*args):
    return _Backend.MPICommons_barrier(*args)
MPICommons_barrier = _Backend.MPICommons_barrier

def MPICommons_isMaster(*args):
    return _Backend.MPICommons_isMaster(*args)
MPICommons_isMaster = _Backend.MPICommons_isMaster

class OnTheFlyMSD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnTheFlyMSD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnTheFlyMSD, name)
    __repr__ = _swig_repr

    def __init__(self, configuration, history_steps, n_bins, t_max, t0, track_type, abc_to_xyz, blocksize=0):
        this = _Backend.new_OnTheFlyMSD(configuration, history_steps, n_bins, t_max, t0, track_type, abc_to_xyz, blocksize)
        try:
            self.this.append(this)
        except:
            self.this = this

    def registerStep(self, time, configuration):
        return _Backend.OnTheFlyMSD_registerStep(self, time, configuration)

    def histogramBuffer(self):
        return _Backend.OnTheFlyMSD_histogramBuffer(self)

    def histogramBufferSqr(self):
        return _Backend.OnTheFlyMSD_histogramBufferSqr(self)

    def histogramBinCounts(self):
        return _Backend.OnTheFlyMSD_histogramBinCounts(self)

    def historyStepsHistogramBinCounts(self):
        return _Backend.OnTheFlyMSD_historyStepsHistogramBinCounts(self)

    def historyBuffer(self):
        return _Backend.OnTheFlyMSD_historyBuffer(self)

    def hstepCounts(self):
        return _Backend.OnTheFlyMSD_hstepCounts(self)

    def blockerValues(self):
        return _Backend.OnTheFlyMSD_blockerValues(self)
    __swig_destroy__ = _Backend.delete_OnTheFlyMSD
    __del__ = lambda self: None
OnTheFlyMSD_swigregister = _Backend.OnTheFlyMSD_swigregister
OnTheFlyMSD_swigregister(OnTheFlyMSD)


def calculateAndBinMSD(history, abc_to_xyz, binsize, histogram, histogram_sqr, bin_counters, hsteps_bin_counts, hstep_counts, blocker):
    return _Backend.calculateAndBinMSD(history, abc_to_xyz, binsize, histogram, histogram_sqr, bin_counters, hsteps_bin_counts, hstep_counts, blocker)
calculateAndBinMSD = _Backend.calculateAndBinMSD

def seedRandom(time_seed, seed):
    return _Backend.seedRandom(time_seed, seed)
seedRandom = _Backend.seedRandom

def randomDouble01():
    return _Backend.randomDouble01()
randomDouble01 = _Backend.randomDouble01
# This file is compatible with both classic and new-style classes.


